[pytest]
# Pytest configuration for Garmin AI Training Optimization System
# Phase 2: Comprehensive testing infrastructure

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths - Phase 2
testpaths =
    tests
    tests/unit
    tests/integration
    tests/mocks

# Test options
addopts =
    --strict-markers
    --tb=short
    --disable-warnings
    -ra

# Coverage options (install pytest-cov to enable)
# Add these to command line when running with coverage:
#   --cov=app --cov-branch --cov-report=html:htmlcov --cov-fail-under=80

# Test markers for organization
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (database, services)
    slow: Slow running tests (>1s)
    garmin: Garmin integration tests
    asyncio: Async/await tests (requires pytest-asyncio)
    db: Database tests
    mock: Mock/mock service tests
    readiness: Readiness analysis tests
    load: Training load tests
    pipeline: Data pipeline tests
    performance: Performance benchmarking tests
    scenario: Scenario-based integration tests

# Asyncio configuration (requires pytest-asyncio)
# asyncio_mode = auto

# Output options
console_output_style = progress
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage options
[coverage:run]
source = app
omit =
    */tests/*
    */test_*.py
    */__init__.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if __name__ == .__main__.:
    raise AssertionError
    raise NotImplementedError
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:
    @abstractmethod
